package edu.stanford.facs.data;

import java.io.IOException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Iterator;
import java.util.List;

import org.isac.fcs.FCSException;
import org.isac.fcs.FCSFile;
import org.isac.fcs.FCSHandler;
import org.isac.fcs.FCSParameter;


public abstract class AnalyzedData
  extends AugmentedData
{
    /*
     * These are data per detector with nevents.  that's why...
     */
  public class IntegerAnalysis
  {
    public final String name;
    public final int[] results;

    IntegerAnalysis (String name)
    {
      this.name = name;
      results = new int[Nevents];
    }
  }

  public class FloatAnalysis
  {
    public final String name;
    public final float[] results;

    FloatAnalysis (String name)
    {
      this.name = name;
      results = new float[Nevents];
    }
  }

  protected final ArrayList<IntegerAnalysis> intResults = new ArrayList<IntegerAnalysis>();
  protected final ArrayList<FloatAnalysis> floatResults = new ArrayList<FloatAnalysis>();

  public AnalyzedData (String tag)
  {
    super(tag);
  }

  protected abstract void analyze ();

  public final int[] addIntegerAnalysis (String name)
  {
    IntegerAnalysis analysis = new IntegerAnalysis(name);
    intResults.add(analysis);
    return analysis.results;
  }

  public final float[] addFloatAnalysis (String name)
  {
    FloatAnalysis analysis = new FloatAnalysis(name);
    floatResults.add(analysis);
    return analysis.results;
  }

  public final List<IntegerAnalysis> getIntegerResults ()
  {
    return Collections.unmodifiableList(intResults);
  }

  public final List<FloatAnalysis> getFloatResults ()
  {
    return Collections.unmodifiableList(floatResults);
  }

  protected void augmentData (FCSHandler itOut, int k)
    throws IOException
  {
    Iterator<IntegerAnalysis> i = intResults.iterator();
    while (i.hasNext())
    {
      IntegerAnalysis analysis = i.next();
      itOut.writeFloat(analysis.results[k] * 10000);
    }

    Iterator<FloatAnalysis> f = floatResults.iterator();
    while (f.hasNext())
    {
      FloatAnalysis analysis = f.next();
      itOut.writeFloat(analysis.results[k]);
    }
  }

  /*
   * implements ed.stanford.facs.data.AugmentData()
   */
  protected void augmentHeader (FCSFile fcsOut)
    throws FCSException, IOException
  {
    Iterator<IntegerAnalysis> i = intResults.iterator();
    while (i.hasNext())
    {
      IntegerAnalysis analysis = i.next();
      FCSParameter fcsp = fcsOut.addParameter();
      fcsp.setAttribute("$P", "B", 32);
      fcsp.setAttribute("$P", "R", 1 << 18);
      fcsp.setAttribute("$P", "E", "0,0");
      fcsp.setAttribute("$P", "G", 1.0);
      fcsp.setAttribute("$P", "N", analysis.name);
    }

    Iterator<FloatAnalysis> f = floatResults.iterator();
    while (f.hasNext())
    {
      FloatAnalysis analysis = f.next();
      FCSParameter fcsp = fcsOut.addParameter();
      fcsp.setAttribute("$P", "B", 32);//number of bits reserved for parameter
      fcsp.setAttribute("$P", "R", 1 << 18); //range for parameter number n
      fcsp.setAttribute("$P", "E", "0,0"); //amplification type for parameter N
      fcsp.setAttribute("$P", "G", 1.0);//amplifier gain used for acquitision not req
      fcsp.setAttribute("$P", "N", analysis.name); //short name
    }
  }

  @Override
  protected void augmentDataCSV (PrintWriter pw, int k)
    throws FCSException, IOException
  {
    Iterator<IntegerAnalysis> i = intResults.iterator();
    while (i.hasNext())
    {
      IntegerAnalysis analysis = i.next();
      pw.print(',');
      pw.printf("%10d", analysis.results[k]);
    }

    Iterator<FloatAnalysis> f = floatResults.iterator();
    while (f.hasNext())
    {
      FloatAnalysis analysis = f.next();
      pw.print(',');
      pw.printf("%10e", analysis.results[k]);
    }
  }

  @Override
  protected void augmentHeaderCSV (PrintWriter pw)
    throws FCSException, IOException
  {
    Iterator<IntegerAnalysis> i = intResults.iterator();
    while (i.hasNext())
    {
      IntegerAnalysis analysis = i.next();
      pw.print(',');
      pw.print(analysis.name);
    }

    Iterator<FloatAnalysis> f = floatResults.iterator();
    while (f.hasNext())
    {
      FloatAnalysis analysis = f.next();
      pw.print(',');
      pw.print(analysis.name);
    }
  }
}